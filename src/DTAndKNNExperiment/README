I used decision trees and the k-nearest-neighbor algorithm to classify whether a 3x3 tic-tac-toe board's X-player is the winner of not.
 
I created a simple Decision Tree data structure and populated it using the ID3 algorithm. For the K-Nearest-Neighbors (KNN) algorithm, I simply computed the hamming distance of each data point. To find the ideal hyper-parameter K for KNN (K = number of neighbors), I cross validated on the tic-tac-toe data using 6-fold cross validation.
 
Each tic-tac-toe data file, e.g. tic-tac-toe-test.txt, has rows that look like this: "b,b,o,x,x,x,b,b,o,positive" where b = blank, x = marked with an X, and o = marked with an O. The first 3 letters represent the 1st row of the board, the 4th-6th letters represent the second row, the 7th-9th letters represent the 3rd row of the board, and the label 'positive' or 'negative' denotes whether X is the winner or not. So for instance, the example above has X as the winner and would look like this in board form:

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-qgsu{font-size:15px;vertical-align:top}
.tg .tg-bzci{font-size:20px;text-align:center;vertical-align:top}
.tg .tg-yw4l{vertical-align:top}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 123px">
<colgroup>
<col style="width: 41px">
<col style="width: 41px">
<col style="width: 41px">
</colgroup>
  <tr>
    <th class="tg-qgsu"></th>
    <th class="tg-yw4l"></th>
    <th class="tg-bzci">O</th>
  </tr>
  <tr>
    <td class="tg-bzci">X</td>
    <td class="tg-bzci">X</td>
    <td class="tg-bzci">X</td>
  </tr>
  <tr>
    <td class="tg-yw4l"></td>
    <td class="tg-yw4l"></td>
    <td class="tg-bzci">O</td>
  </tr>
</table>
